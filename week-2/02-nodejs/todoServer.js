/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs=require('fs');
  const path=require('path');
  const dataFilePath=path.resolve(__dirname,'todos.json');
  const todoarr=require(dataFilePath);
 
  let ID=0;
  function idmiddleware(req,res,next){
    ID=ID+1;
    next();
  }
  const app = express();
  // const todoarr=[];
  app.use(bodyParser.json());

  app.get("/todos",(req,res)=>{
    res.json(JSON.parse(todoarr));
  })

  app.get("/todos/:id",(req,res)=>{
    const Tid=parseInt(req.params.id,10);
    const Tfind=todoarr.find(obj=> obj.id===Tid);
    if(Tfind){
      // res.status(200).json({data:`Todo is ${Tfind.title}`});
      res.json(Tfind);
    }
    else{
      res.status(404);
    }
  })

  app.post("/todos",idmiddleware,(req,res)=>{
    const todo=req.body.todo;
    const comp=req.body.compl;
    const desc=req.body.desc;
    const obj={id:ID,title:todo,completed:comp,des:desc};
    todoarr.push(obj);
    fs.writeFileSync(dataFilePath,JSON.stringify(todoarr,null,2));
    res.status(201).json(todoarr);
  })

  app.put("/todos/:id",(req,res)=>{
    const Tid=parseInt(req.params.id,10);
    // const todo=req.body.todo;
    const comp=req.body.compl;
    const Tfind=todoarr.find(obj=> obj.id===Tid);
    if(Tfind){
      Tfind.completed=comp;
      fs.writeFileSync(dataFilePath,JSON.stringify(todoarr,null,2));
      res.status(200).json("done");
    }
    else{
      res.status(404);
    }
  })

  app.delete("/todos/:id",(req,res)=>{
    const TId=parseInt(req.params.id,10);
    const TfindI=todoarr.findIndex(obj=> obj.id===TId);
    if(TfindI != -1){
      const deleted=todoarr.splice(TfindI,1)[0];
      fs.writeFileSync(dataFilePath,JSON.stringify(todoarr,null,2));
      console.log(TfindI);
      res.status(200).json({message:"Todo delete: ",deleted});
    }
    else{
      res.status(404);
    }
  })
app.use((req,res,next)=>{
  res.status(404).send();
})
  app.listen(3000,()=>{
    console.log("server is listening");
  })

  module.exports = app;